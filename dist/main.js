/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/config.js":
/*!***********************!*\
  !*** ./src/config.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gameConfig\": () => (/* binding */ gameConfig),\n/* harmony export */   \"svgConfig\": () => (/* binding */ svgConfig)\n/* harmony export */ });\nconst gameConfig = {\r\n    golfBallRadius: 2,\r\n    frictionPerTime: 0.3,\r\n    speedThreshold: 0.1,\r\n    maxDirectionLineLength: 10,\r\n};\r\n\r\nconst svgConfig = {\r\n    golfBallAttributes: {'r': gameConfig.golfBallRadius, 'fill': 'black'},\r\n    // The boundary is divided into two components.\r\n    // The outer draws the boundary, while the inner ensures that the inner area is white\r\n    // for the golf ball\r\n    directionLineAttributes: {'stroke': 'black', 'stroke-width': 1, 'fill': 'none', 'stroke-linecap': 'round'},\r\n    boundaryAttributesOuter: {'stroke': 'black', 'stroke-width': 6, 'fill': 'none'},\r\n    boundaryAttributesInner: {'stroke': 'white', 'fill': 'white'},\r\n    obstacleAttributes: {'stroke': 'white', 'fill': 'black'},\r\n};\r\nsvgConfig.boundaryAttributesInner['stroke-width'] = 0;\r\nsvgConfig.obstacleAttributes['stroke-width'] = 0;\r\n\r\n\n\n//# sourceURL=webpack://minigolf/./src/config.js?");

/***/ }),

/***/ "./src/course.js":
/*!***********************!*\
  !*** ./src/course.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _svg_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./svg-utilities */ \"./src/svg-utilities.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"./src/config.js\");\n/* harmony import */ var _math_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math-utilities */ \"./src/math-utilities.js\");\n\r\n\r\n\r\n\r\n// vertices is an object containing two arrays: boundary and obstacles\r\n// boundary contains the vertices of the polygonal boundary, while\r\n// obstacles contains zero or more array of vertices for internal obstacles\r\nconst Course = function(vertices, rootSVGElement) {\r\n    const boundaryVertices = vertices.boundary;\r\n    const obstacles = vertices.obstacles;\r\n    const courseElement = _svg_utilities__WEBPACK_IMPORTED_MODULE_0__.createGroupElement(['course-container']);\r\n    rootSVGElement.append(courseElement);\r\n\r\n    let edges = [];\r\n\r\n    function computeEdges() {\r\n        const boundaryVerticesLooped = [...boundaryVertices];\r\n        boundaryVerticesLooped.push(boundaryVerticesLooped[0]);\r\n    \r\n        // Create array of edges from both boundary and inner obstacles\r\n        for (let i = 1; i < boundaryVerticesLooped.length; i++) {\r\n            const a = boundaryVerticesLooped[i-1];\r\n            const b = boundaryVerticesLooped[i];\r\n            edges.push(_math_utilities__WEBPACK_IMPORTED_MODULE_2__.Edge(_math_utilities__WEBPACK_IMPORTED_MODULE_2__.Vector({x: a.x, y: a.y}), _math_utilities__WEBPACK_IMPORTED_MODULE_2__.Vector({x: b.x, y: b.y})));\r\n        }\r\n        obstacles?.forEach(obstacleVertices => {\r\n            const obstacleVerticesLooped = [...obstacleVertices];\r\n            obstacleVerticesLooped.push(obstacleVerticesLooped[0]);\r\n            for (let i = 1; i < obstacleVerticesLooped.length; i++) {\r\n                const a = obstacleVerticesLooped[i-1];\r\n                const b = obstacleVerticesLooped[i];\r\n            edges.push(_math_utilities__WEBPACK_IMPORTED_MODULE_2__.Edge(_math_utilities__WEBPACK_IMPORTED_MODULE_2__.Vector({x: a.x, y: a.y}), _math_utilities__WEBPACK_IMPORTED_MODULE_2__.Vector({x: b.x, y: b.y})));\r\n            }\r\n        })\r\n    \r\n    }\r\n    \r\n    function printVertices() {\r\n        console.log(vertices);\r\n    }\r\n\r\n    function draw() {\r\n        _svg_utilities__WEBPACK_IMPORTED_MODULE_0__.drawPolygon(courseElement, boundaryVertices, \r\n            _config__WEBPACK_IMPORTED_MODULE_1__.svgConfig.boundaryAttributesOuter, ['course-boundary', 'course-boundary-outer']);\r\n        _svg_utilities__WEBPACK_IMPORTED_MODULE_0__.drawPolygon(courseElement, boundaryVertices, \r\n            _config__WEBPACK_IMPORTED_MODULE_1__.svgConfig.boundaryAttributesInner, ['course-boundary', 'course-boundary-inner']);\r\n        //boundaryVertices.forEach(vertex => svgUtilities.drawCircle(courseElement, vertex, {'r': 0.5, fill: 'red', 'stroke-width': 0 }));\r\n        obstacles?.forEach(obstacleVertices => {\r\n            _svg_utilities__WEBPACK_IMPORTED_MODULE_0__.drawPolygon(courseElement, obstacleVertices, \r\n                _config__WEBPACK_IMPORTED_MODULE_1__.svgConfig.obstacleAttributes, ['course-obstacle']);\r\n            //obstacleVertices.forEach(vertex => svgUtilities.drawCircle(courseElement, vertex, {'r': 0.5, fill: 'blue', 'stroke-width': 0 }));\r\n            }\r\n        )\r\n    }\r\n\r\n    function initialize() {\r\n        computeEdges();\r\n        draw();\r\n    }\r\n\r\n    function getBoundaryVertices() {\r\n        return(boundaryVertices);\r\n    }\r\n\r\n    function getObstacles() {\r\n        return(obstacles);\r\n    }\r\n\r\n    function getEdges() {\r\n        return(edges);\r\n    }\r\n\r\n    return({ draw, initialize, getBoundaryVertices, getObstacles, getEdges });\r\n};\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Course);\n\n//# sourceURL=webpack://minigolf/./src/course.js?");

/***/ }),

/***/ "./src/game-mechanics.js":
/*!*******************************!*\
  !*** ./src/game-mechanics.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _math_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math-utilities */ \"./src/math-utilities.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"./src/config.js\");\n/* harmony import */ var _svg_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./svg-utilities */ \"./src/svg-utilities.js\");\n\r\n\r\n\r\n\r\nconst GameMechanics = function(course, golfBall) {\r\n    \r\n    // Create array of edges from both boundary and inner obstacles\r\n    const edges = course.getEdges();\r\n    let collisionData;\r\n    let initialSpeed = golfBall.getSpeed();\r\n\r\n    function computeNextCollision() {\r\n        const golfBallPosition = golfBall.getPosition();\r\n        const golfBallDirection = golfBall.getDirection();\r\n        const directionVector = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.createUnitVector(golfBallDirection);\r\n        const golfBallPath = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.Path(golfBallPosition, directionVector);\r\n\r\n        // Paths that outline the extent covered by the motion of the golf ball\r\n        const outerPaths = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.getParallelPaths(golfBallPath, _config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.golfBallRadius);\r\n        \r\n        const rootSVGElement = document.querySelector(\"#game-container\");\r\n        // collisionData contains three properties: \"Time\" of collision (based\r\n        // on unit vector, not actual time), location of collision, and center of\r\n        // golf ball at collision\r\n        let earliestCollisionData = {time: Infinity};\r\n        for (const edge of edges) {\r\n            const start = edge.getStartVertex();\r\n            const end = edge.getEndVertex();\r\n            \r\n            const interSectionA = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.computePathEdgeIntersection(outerPaths.pathA, edge);\r\n            const interSectionB = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.computePathEdgeIntersection(outerPaths.pathB, edge);\r\n            let color; //\r\n            if (interSectionA && interSectionB) {\r\n                const canCollide = \r\n                    (_math_utilities__WEBPACK_IMPORTED_MODULE_0__.isInRange(interSectionA.edgeParameter, 0, 1) && \r\n                    _math_utilities__WEBPACK_IMPORTED_MODULE_0__.isInRange(interSectionA.pathParameter, 0, Infinity)) ||\r\n                    (_math_utilities__WEBPACK_IMPORTED_MODULE_0__.isInRange(interSectionB.edgeParameter, 0, 1) && \r\n                    _math_utilities__WEBPACK_IMPORTED_MODULE_0__.isInRange(interSectionB.pathParameter, 0, Infinity))\r\n                if (canCollide) {\r\n                    // Compute collision\r\n                    const collisionData = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.computeMovingCircleEdgeIntersection(\r\n                        golfBallPath, _config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.golfBallRadius, edge);\r\n                    if (collisionData.time < earliestCollisionData.time) {\r\n                        earliestCollisionData = collisionData;\r\n                    }\r\n                }\r\n            } \r\n        }\r\n        const collisionPointCenterVector = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.subtractVectors(earliestCollisionData.collisionPoint, \r\n            earliestCollisionData.collisionCenter)\r\n        let newDirectionVector = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.vectorReflection(directionVector,\r\n            collisionPointCenterVector);\r\n        newDirectionVector = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.scaleVector(newDirectionVector, -1);\r\n        const directionAfterCollision = Math.atan2(newDirectionVector.getY(), newDirectionVector.getX());\r\n        earliestCollisionData.directionAfterCollision = directionAfterCollision;\r\n        return(earliestCollisionData);\r\n\r\n    }\r\n    \r\n    function step(timeStep) {\r\n        if (!collisionData) {\r\n            collisionData = computeNextCollision();\r\n            /*const parentSVGElement = document.querySelector(\"#game-container\");\r\n            svgUtilities.drawCircle(parentSVGElement, collisionData.collisionCenter, {'r': 1, 'fill': \"red\"});\r\n            const directionVector = mUtils.scaleVector(mUtils.createUnitVector(collisionData.directionAfterCollision), 10);\r\n            svgUtilities.drawLine(parentSVGElement, \r\n                collisionData.collisionCenter, \r\n                mUtils.addVectors(collisionData.collisionCenter, directionVector), {'stroke': 'blue'});*/\r\n        }\r\n\r\n        const distanceToCollision = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.VectorDistance(golfBall.getPosition(), \r\n            collisionData.collisionCenter);\r\n        const nextStepLength = golfBall.getSpeed()*timeStep;\r\n\r\n        // If the next step is longer than the distance to the collision,\r\n        // we'll split it into two steps: a partial step equal to the distance\r\n        // to the collision, and a post-collision step using the remaining time\r\n        if (nextStepLength > distanceToCollision) {\r\n            // Partial step\r\n            const partialStepTime = distanceToCollision / golfBall.getSpeed();\r\n            golfBall.step(partialStepTime);\r\n\r\n            // Change direction due to collision, and perform rest of step\r\n            golfBall.setDirection(collisionData.directionAfterCollision);\r\n            const remainingStepTime = timeStep - partialStepTime;\r\n            collisionData = null;\r\n\r\n            step(remainingStepTime);\r\n        } else {\r\n            golfBall.step(timeStep);\r\n            const oldSpeed = golfBall.getSpeed();\r\n            const newSpeed = (1 - _config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.frictionPerTime*timeStep)*oldSpeed;\r\n            golfBall.setSpeed(newSpeed);\r\n            if (golfBall.getSpeed() < _config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.speedThreshold*initialSpeed) {\r\n                golfBall.setSpeed(0);\r\n                console.log(\"fin\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function multipleSteps(timeStep, numberOfSteps) {\r\n        for (let i = 0; i < numberOfSteps; i++) {\r\n            step(timeStep);\r\n        }\r\n    }\r\n    //setInterval(() => multipleSteps(0.0167/10, 10), 1000/60);\r\n    setInterval(() => step(1/25), 1000/25);\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GameMechanics);\n\n//# sourceURL=webpack://minigolf/./src/game-mechanics.js?");

/***/ }),

/***/ "./src/golf-ball.js":
/*!**************************!*\
  !*** ./src/golf-ball.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/config.js\");\n/* harmony import */ var _svg_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./svg-utilities */ \"./src/svg-utilities.js\");\n/* harmony import */ var _math_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math-utilities */ \"./src/math-utilities.js\");\n\r\n\r\n\r\n\r\nconst GolfBall = function(\r\n        initialPosition, \r\n        initialSpeed, \r\n        initialDirection, \r\n        rootSVGElement) {\r\n    \r\n    let position = _math_utilities__WEBPACK_IMPORTED_MODULE_2__.Vector(initialPosition);\r\n    let speed = initialSpeed;\r\n    let direction = initialDirection;\r\n    let _unitDirectionVector = _math_utilities__WEBPACK_IMPORTED_MODULE_2__.createUnitVector(direction);\r\n    let _golfBallElement;\r\n    let directionLine;\r\n    const _computeSVGPosition = _svg_utilities__WEBPACK_IMPORTED_MODULE_1__.createSVGPositionComputer(rootSVGElement);\r\n\r\n    function draw() {\r\n        _golfBallElement = _svg_utilities__WEBPACK_IMPORTED_MODULE_1__.drawCircle(rootSVGElement, position.getCoordinates(), \r\n            _config__WEBPACK_IMPORTED_MODULE_0__.svgConfig.golfBallAttributes, ['golf-ball']);\r\n    }\r\n\r\n    function getPosition() {\r\n        return(position);\r\n    }\r\n\r\n    function setPosition(newPosition) {\r\n        position = newPosition;\r\n        _svg_utilities__WEBPACK_IMPORTED_MODULE_1__.setCirclePosition(_golfBallElement, position.getCoordinates());\r\n    }\r\n\r\n    function getSpeed() {\r\n        return(speed);\r\n    }\r\n\r\n    function setSpeed(newSpeed) {\r\n        speed = newSpeed;\r\n    }\r\n\r\n    function getDirection() {\r\n        return(direction);\r\n    }\r\n\r\n    function setDirection(newDirection) {\r\n        direction = newDirection;\r\n        _unitDirectionVector = _math_utilities__WEBPACK_IMPORTED_MODULE_2__.createUnitVector(direction)\r\n    }\r\n\r\n    function step(timeStep) {\r\n        const stepSize = speed*timeStep;\r\n        let newPosition = position;\r\n        newPosition.setX(newPosition.getX() + stepSize*_unitDirectionVector.getX());\r\n        newPosition.setY(newPosition.getY() + stepSize*_unitDirectionVector.getY());\r\n        setPosition(newPosition);\r\n    }\r\n\r\n    function _addEventListeners() {\r\n        function _handleMouseMove(event) {\r\n            //const touch = event.changedTouches[0];\r\n            //const position = computeSVGPosition({x: touch.clientX, y: touch.clientY});\r\n            const position = _computeSVGPosition({x: event.clientX, y: event.clientY});\r\n            //setPosition(mUtils.Vector(position));\r\n            _svg_utilities__WEBPACK_IMPORTED_MODULE_1__.setLineEnd(directionLine, position);\r\n        }\r\n        function _handleMovementStart() {\r\n            directionLine = _svg_utilities__WEBPACK_IMPORTED_MODULE_1__.drawLine(rootSVGElement, position, position,\r\n                _config__WEBPACK_IMPORTED_MODULE_0__.svgConfig.directionLineAttributes, ['direction-line']);\r\n            rootSVGElement.addEventListener('mousemove', _handleMouseMove);\r\n            rootSVGElement.addEventListener('mouseup', _handleMovementEnd);\r\n\r\n            //rootSVGElement.addEventListener('touchmove', handleMouseMove);\r\n            //rootSVGElement.addEventListener('touchend', handleMovementEnd);\r\n        }\r\n        function _handleMovementEnd() {\r\n            directionLine.remove();\r\n            directionLine = null;\r\n            rootSVGElement.removeEventListener('mousemove', _handleMouseMove);\r\n            rootSVGElement.removeEventListener('mouseup', _handleMovementEnd);\r\n\r\n            //rootSVGElement.removeEventListener('touchmove', handleMouseMove);\r\n            //rootSVGElement.removeEventListener('touchend', handleMovementEnd);\r\n        }\r\n        _golfBallElement.addEventListener('mousedown', _handleMovementStart);\r\n        //golfBallElement.addEventListener('touchstart', handleMovementStart);\r\n    }\r\n\r\n    function initialize() {\r\n        draw();\r\n        _addEventListeners();\r\n    }\r\n\r\n\r\n    return({ initialize, draw, \r\n        getPosition, setPosition, \r\n        getSpeed, setSpeed,\r\n        getDirection, setDirection,\r\n    step })\r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GolfBall);\n\n//# sourceURL=webpack://minigolf/./src/golf-ball.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _course__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./course */ \"./src/course.js\");\n/* harmony import */ var _golf_ball__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./golf-ball */ \"./src/golf-ball.js\");\n/* harmony import */ var _game_mechanics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./game-mechanics */ \"./src/game-mechanics.js\");\n\r\n\r\n\r\n\r\nconst rootSVGElement = document.querySelector('#game-container');\r\n\r\nconst course = (0,_course__WEBPACK_IMPORTED_MODULE_0__.default)({\r\n    boundary: [\r\n    {x: 10, y: 40},\r\n    {x: 30, y: 40},\r\n    {x: 30, y: 45},\r\n    {x: 65, y: 45},\r\n    {x: 65, y: 40},\r\n    {x: 90, y: 40},\r\n    {x: 90, y: 60},\r\n    {x: 65, y: 60},\r\n    {x: 65, y: 55},\r\n    {x: 30, y: 55},\r\n    {x: 30, y: 60},\r\n    {x: 10, y: 60}\r\n    /*{x:10,y:60},\r\n{x:30,y:60},\r\n{x:30,y:55},\r\n{x:65,y:55},\r\n{x:65,y:60},\r\n{x:90,y:60},\r\n{x:90,y:40},\r\n{x:65,y:40},\r\n{x:65,y:45},\r\n{x:30,y:45},\r\n{x:30,y:40},\r\n{x:10,y:40}*/\r\n],\r\n    obstacles: [\r\n        [\r\n            {x: 15, y: 55},\r\n            {x: 25, y: 55},\r\n            {x: 25, y: 45},\r\n            {x: 15, y: 45}\r\n            /*{x: 15, y: 45},\r\n            {x: 25, y: 45},\r\n            {x: 25, y: 55},\r\n            {x: 15, y: 55} */\r\n        ]\r\n    ]\r\n    },\r\n    rootSVGElement);\r\ncourse.initialize();\r\n\r\nconst golfBall = (0,_golf_ball__WEBPACK_IMPORTED_MODULE_1__.default)({x: 80, y: 50}, 0, Math.PI / 2 * 1.9, rootSVGElement);\r\n//const golfBall = GolfBall({x: 17, y: 57}, 2, Math.PI*1.05, rootSVGElement);\r\ngolfBall.initialize();\r\n\r\nconst gameMechanics = (0,_game_mechanics__WEBPACK_IMPORTED_MODULE_2__.default)(course, golfBall);\r\n\n\n//# sourceURL=webpack://minigolf/./src/index.js?");

/***/ }),

/***/ "./src/math-utilities.js":
/*!*******************************!*\
  !*** ./src/math-utilities.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vector\": () => (/* binding */ Vector),\n/* harmony export */   \"dotProduct\": () => (/* binding */ dotProduct),\n/* harmony export */   \"crossProduct2D\": () => (/* binding */ crossProduct2D),\n/* harmony export */   \"addVectors\": () => (/* binding */ addVectors),\n/* harmony export */   \"VectorDistance\": () => (/* binding */ VectorDistance),\n/* harmony export */   \"subtractVectors\": () => (/* binding */ subtractVectors),\n/* harmony export */   \"scaleVector\": () => (/* binding */ scaleVector),\n/* harmony export */   \"createUnitVector\": () => (/* binding */ createUnitVector),\n/* harmony export */   \"vectorProjection\": () => (/* binding */ vectorProjection),\n/* harmony export */   \"vectorReflection\": () => (/* binding */ vectorReflection),\n/* harmony export */   \"Edge\": () => (/* binding */ Edge),\n/* harmony export */   \"Path\": () => (/* binding */ Path),\n/* harmony export */   \"computePathEdgeIntersection\": () => (/* binding */ computePathEdgeIntersection),\n/* harmony export */   \"getParallelPaths\": () => (/* binding */ getParallelPaths),\n/* harmony export */   \"isInRange\": () => (/* binding */ isInRange),\n/* harmony export */   \"computeMovingCircleEdgeIntersection\": () => (/* binding */ computeMovingCircleEdgeIntersection)\n/* harmony export */ });\n\r\n// Represents a general two-dimensional vector (or point)\r\nfunction Vector({x, y}) {\r\n    let _x = x;\r\n    let _y = y;\r\n    let _length;\r\n\r\n    function getX() {\r\n        return(_x);\r\n    }\r\n\r\n    function setX(newX) {\r\n        _x = newX;\r\n    }\r\n\r\n    function getY() {\r\n        return(_y);\r\n    }\r\n\r\n    function setY(newY) {\r\n        _y = newY;\r\n    }\r\n\r\n    function getCoordinates() {\r\n        return({x: _x, y: _y})\r\n    }\r\n\r\n    function getPerpendicular() {\r\n        return(Vector({x: -_y, y: _x}));\r\n    }\r\n\r\n    function getLength() {\r\n        if (!_length) {\r\n            _length = Math.sqrt(_x**2 + _y**2)\r\n        }\r\n        return(_length);\r\n    }\r\n\r\n    function normalize() {\r\n        const length = getLength();\r\n        if (length == 0) return;\r\n        _x /= length;\r\n        _y /= length;\r\n    }\r\n\r\n    function getNormalized() {\r\n        return(Vector({x: _x / getLength(), y: _y / getLength()}));\r\n    }\r\n\r\n    function getString() {\r\n        return(`[x: ${_x}, y: ${y}]`)\r\n    }\r\n    return({ getX, setX, getY, setY, getPerpendicular, getLength, normalize,\r\n            getCoordinates, getNormalized, getString })\r\n}\r\n\r\nfunction dotProduct(vector1, vector2) {\r\n    return(vector1.getX()*vector2.getX() + vector1.getY()*vector2.getY());\r\n}\r\n\r\nfunction crossProduct2D(vector1, vector2) {\r\n    return(vector1.getX()*vector2.getY() - vector2.getX()*vector1.getY());\r\n}\r\n\r\nfunction addVectors(vector1, vector2) {\r\n    const sumX = vector1.getX() + vector2.getX();\r\n    const sumY = vector1.getY() + vector2.getY();\r\n    return(Vector({x: sumX, y: sumY}));\r\n}\r\n\r\nfunction subtractVectors(vector1, vector2) {\r\n    const differenceX = vector1.getX() - vector2.getX();\r\n    const differenceY = vector1.getY() - vector2.getY();\r\n    return(Vector({x: differenceX, y: differenceY}));\r\n}\r\n\r\nfunction scaleVector(vector, scalar) {\r\n    const scaledX = scalar*vector.getX();\r\n    const scaledY = scalar*vector.getY();\r\n    return(Vector({x: scaledX, y: scaledY}));\r\n}\r\n\r\nfunction createUnitVector(direction) {\r\n    return(Vector({x: Math.cos(direction), y: Math.sin(direction)}));\r\n}\r\n\r\n// Computes the projection of vectorA onto vectorB\r\nfunction vectorProjection(vectorA, vectorB) {\r\n    const scalarProjection = dotProduct(vectorA, vectorB) / vectorB.getLength()**2;\r\n    return(scaleVector(vectorB, scalarProjection));\r\n}\r\n\r\n// Reflects the vectorA by vectorB. This is done by first computing the vector\r\n// rejection of vectorA on vectorB (vectorA - the projection of vectorA on vectorB).\r\n// Then, the reflection is given by vectorA - 2*(rejection of vectorA on vectorB)\r\nfunction vectorReflection(vectorA, vectorB) {\r\n    const rejection = subtractVectors(vectorA, vectorProjection(vectorA, vectorB));\r\n    return(subtractVectors(vectorA, scaleVector(rejection, 2)));\r\n}\r\n\r\nfunction VectorDistance(vector1, vector2) {\r\n    return(subtractVectors(vector2, vector1).getLength());\r\n}\r\n\r\n// Represents an edge in a polygon\r\nfunction Edge(startVertex, endVertex) {\r\n    let _startVertex = startVertex;\r\n    let _endVertex = endVertex;\r\n    let _diffVector = subtractVectors(_endVertex, _startVertex);\r\n\r\n    function getLength() {\r\n        return(_diffVector.getLength());\r\n    }\r\n\r\n    function getStartVertex() {\r\n        return(_startVertex);\r\n    }\r\n\r\n    function getEndVertex() {\r\n        return(_endVertex);\r\n    }\r\n\r\n    function getDifferenceVector() {\r\n        return(_diffVector);\r\n    }\r\n\r\n    // Takes in a position on the edge and computes the proportion,\r\n    // so that a value between 0 (startVertex) and 1 (endVertex) is returned\r\n    // when the position is on the vertex\r\n    function computePositionProportion(position) {\r\n        const startPositionDistance = subtractVectors(startVertex, position).getLength();\r\n        const endPositionDistance = subtractVectors(endVertex, position).getLength();\r\n        const proportion = startPositionDistance / getLength();\r\n        if (endPositionDistance > getLength()) {\r\n            return(-proportion);\r\n        }\r\n        return(proportion);\r\n    }\r\n\r\n    function getString() {\r\n        return(`Start: ${_startVertex.getString()}, end: ${_endVertex.getString()}`)\r\n    }\r\n    \r\n    return({ getLength, getStartVertex, getEndVertex, getDifferenceVector, getString,\r\n            computePositionProportion });\r\n}\r\n\r\n// A path describes the motion of the ball\r\nfunction Path(initialPoint, directionVector) {\r\n    let _initialPoint = initialPoint;\r\n    let _directionVector = directionVector;\r\n\r\n    function getInitialPoint() {\r\n        return(_initialPoint);\r\n    }\r\n\r\n    function getDirectionVector() {\r\n        return(_directionVector);\r\n    }\r\n\r\n    function getPositionAtTime(time) {\r\n        return(addVectors(_initialPoint, scaleVector(_directionVector, time)));\r\n    }\r\n\r\n    function getString() {\r\n        return(`Initial point: ${_initialPoint.getString()}, direction: ${_directionVector.getString()}`)\r\n    }\r\n\r\n    return({ getInitialPoint, getDirectionVector, getPositionAtTime, getString });\r\n}\r\n\r\n// Useful reference: Intersection of two line segments\r\nfunction computePathEdgeIntersection(path, edge) {\r\n    // Path is on the form pathStart + pathVector*t, where t >= 0\r\n    const pathStart = path.getInitialPoint();\r\n    const pathVector = path.getDirectionVector();\r\n\r\n    // Edge is on form edgeStart + edgeVector*u, where 0 <= s <= 1\r\n    const edgeStart = edge.getStartVertex();\r\n    const edgeVector = edge.getDifferenceVector();\r\n\r\n    // Intersection when t = (edgeStart - pathStart) × edgeVector / (pathVector × edgeVector)\r\n    //                or u = (edgeStart - pathStart) × pathVector / (pathVector × edgeVector)\r\n    const startDiff = subtractVectors(edgeStart, pathStart);\r\n    const denominator = crossProduct2D(pathVector, edgeVector);\r\n    if (denominator === 0) return;\r\n\r\n    const t = crossProduct2D(startDiff, edgeVector) / denominator;\r\n    const u = crossProduct2D(startDiff, pathVector) / denominator;\r\n    const intersectionPoint = path.getPositionAtTime(t);\r\n    return({ intersectionPoint, pathParameter: t, edgeParameter: u});\r\n}\r\n\r\n// Given a circle and a path, returns the two paths that are parallel to the \r\n// original path and tangetial to the circle. These will go in the same \r\n// direction, but start in different points\r\nfunction getParallelPaths(path, radius) {\r\n    const directionVector = path.getDirectionVector();\r\n    const unitPerpVector = directionVector.getNormalized().getPerpendicular();\r\n\r\n    const initialPointA = addVectors(path.getInitialPoint(), scaleVector(unitPerpVector, radius));\r\n    const initialPointB = subtractVectors(path.getInitialPoint(), scaleVector(unitPerpVector, radius));\r\n    return({pathA: Path(initialPointA, directionVector), pathB: Path(initialPointB, directionVector)})\r\n}\r\n\r\nfunction isInRange(value, lower, upper) {\r\n    return(value >= lower && value <= upper);\r\n}\r\n\r\n// Computes the intersection point between a circle moving along a straight\r\n// path and an edge\r\nfunction computeMovingCircleEdgeIntersection(path, radius, edge) {\r\n    // Path is on the form pathStart + pathVector*t, where t >= 0\r\n    const pathStart = path.getInitialPoint();\r\n    const pathVector = path.getDirectionVector();\r\n\r\n    // Edge is on form edgeStart + edgeVector*u, where 0 <= s <= 1\r\n    const edgeStart = edge.getStartVertex();\r\n    const edgeEnd = edge.getEndVertex();\r\n    const edgeVector = edge.getDifferenceVector();\r\n\r\n    let time = (radius*edgeVector.getLength() + \r\n        dotProduct(pathStart.getPerpendicular(), edgeVector) +\r\n        dotProduct(edgeStart, edgeEnd.getPerpendicular())) / \r\n        dotProduct(pathVector, edgeVector.getPerpendicular())\r\n    let collisionCenter = path.getPositionAtTime(time);\r\n\r\n    const edgeStartCentered = subtractVectors(edgeStart, collisionCenter);\r\n    const edgeEndCentered = subtractVectors(edgeEnd, collisionCenter);\r\n    const crossProd = crossProduct2D(edgeStartCentered, edgeEndCentered);\r\n\r\n    const collisionPointX = collisionCenter.getX() + \r\n        crossProd * edgeVector.getY() / edgeVector.getLength()**2;\r\n    const collisionPointY = collisionCenter.getY() - \r\n        crossProd * edgeVector.getX() / edgeVector.getLength()**2;\r\n    let collisionPoint = Vector({x: collisionPointX, y: collisionPointY});\r\n\r\n    const collisionEdgeProportion = edge.computePositionProportion(collisionPoint);\r\n    // If this value is between 0 and 1, the collision occurs on the \"flat\" \r\n    // part of the edge, not on a corner\r\n    if (isInRange(collisionEdgeProportion, 0, 1)) {\r\n        return({time, collisionCenter, collisionPoint});\r\n    } else if (isInRange(collisionEdgeProportion, -Infinity, 0)) {\r\n        // If computed collision happens before start of edge,\r\n        // the circle will collide with the start vertex\r\n        collisionPoint = edgeStart;\r\n    } else {\r\n        // Otherwise, it will collide with the end vertex\r\n        collisionPoint = edgeEnd;\r\n    }\r\n\r\n    const startColDiff = subtractVectors(pathStart, collisionPoint);\r\n    time = - (Math.sqrt((dotProduct(startColDiff, pathVector))**2 -\r\n        pathVector.getLength()**2*(startColDiff.getLength()**2 - radius**2)) +\r\n        dotProduct(startColDiff, pathVector))/(pathVector.getLength()**2);\r\n    collisionCenter = path.getPositionAtTime(time);\r\n    return({time, collisionCenter, collisionPoint});\r\n}\r\n\r\n\n\n//# sourceURL=webpack://minigolf/./src/math-utilities.js?");

/***/ }),

/***/ "./src/svg-utilities.js":
/*!******************************!*\
  !*** ./src/svg-utilities.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"drawLine\": () => (/* binding */ drawLine),\n/* harmony export */   \"drawPolygon\": () => (/* binding */ drawPolygon),\n/* harmony export */   \"drawCircle\": () => (/* binding */ drawCircle),\n/* harmony export */   \"createGroupElement\": () => (/* binding */ createGroupElement),\n/* harmony export */   \"setCirclePosition\": () => (/* binding */ setCirclePosition),\n/* harmony export */   \"setLineEnd\": () => (/* binding */ setLineEnd),\n/* harmony export */   \"createSVGPositionComputer\": () => (/* binding */ createSVGPositionComputer)\n/* harmony export */ });\n\r\nconst XMLNS = 'http://www.w3.org/2000/svg';\r\n\r\nfunction createSVGPositionComputer(rootSVGElement) {\r\n    const point = rootSVGElement.createSVGPoint();\r\n    function computeSVGPosition(clientPosition) {\r\n        point.x = clientPosition.x;\r\n        point.y = clientPosition.y;\r\n        return(point.matrixTransform(rootSVGElement.getScreenCTM().inverse()));\r\n    }\r\n    return(computeSVGPosition);\r\n}\r\n\r\nfunction setAttributes(element, attributes) {\r\n    if (!attributes) return;\r\n    for (const name in attributes) {\r\n        element.setAttribute(name, attributes[name]);\r\n    }\r\n}\r\n\r\nfunction createGeneralElement(type, attributes, classArray) {\r\n    const element = document.createElementNS(XMLNS, type);\r\n    classArray?.forEach(className => element.classList.add(className));\r\n    setAttributes(element, attributes);\r\n    return(element);\r\n}\r\n\r\nfunction drawLine(parentSVGElement, startPoint, endPoint, attributes, classArray) {\r\n    attributes.x1 = startPoint.x || startPoint.getX();\r\n    attributes.y1 = startPoint.y || startPoint.getY();\r\n    attributes.x2 = endPoint.x || endPoint.getX();\r\n    attributes.y2 = endPoint.y || endPoint.getY();\r\n\r\n    const lineElement = createGeneralElement('line', attributes, classArray);\r\n\r\n    parentSVGElement.append(lineElement);\r\n    return(lineElement);\r\n    \r\n}\r\n\r\nfunction drawPolygon(parentSVGElement, vertices, attributes, classArray) {\r\n    // Format expected by SVG polygon: x1,y1 x2,y2,...\r\n    const vertexString = vertices\r\n        .map(vertex => `${vertex.x || vertex.getX() },${vertex.y || vertex.getY()}`)\r\n        .join(\" \");\r\n    attributes.points = vertexString;\r\n\r\n    const polygonElement = createGeneralElement('polygon', attributes, classArray);\r\n\r\n    parentSVGElement.append(polygonElement);\r\n    return(polygonElement);\r\n}\r\n\r\nfunction drawCircle(parentSVGElement, center, attributes, classArray) {\r\n    attributes.cx = center.x || center.getX();\r\n    attributes.cy = center.y || center.getY();\r\n\r\n    const circleElement = createGeneralElement('circle', attributes, classArray);\r\n\r\n    parentSVGElement.append(circleElement);\r\n    return(circleElement);\r\n}\r\n\r\nfunction createGroupElement(classArray) {\r\n    const groupElement = createGeneralElement('g', null, classArray);\r\n    return(groupElement);\r\n}\r\n\r\nfunction setCirclePosition(circleElement, position) {\r\n    setAttributes(circleElement, {cx: position.x, cy: position.y});\r\n}\r\n\r\nfunction setLineEnd(lineElement, endPosition) {\r\n    setAttributes(lineElement, {'x2': endPosition.x || endPosition.getX(), \r\n        'y2': endPosition.y || endPosition.getY()});\r\n}\r\n\r\n\n\n//# sourceURL=webpack://minigolf/./src/svg-utilities.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;