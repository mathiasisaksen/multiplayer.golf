/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/color-utilities.js":
/*!********************************!*\
  !*** ./src/color-utilities.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"interpolateColors\": () => (/* binding */ interpolateColors)\n/* harmony export */ });\n\r\nfunction interpolateColors(hslColor1, hslColor2, weight) {\r\n    const hsl1 = _parseHSLString(hslColor1);\r\n    const hsl2 = _parseHSLString(hslColor2);\r\n\r\n    const s = (1 - weight)*hsl1.s + weight*hsl2.s;\r\n    const l = (1 - weight)*hsl1.l + weight*hsl2.l;\r\n\r\n    let hueDiff = hsl2.h - hsl1.h;\r\n    const hueDelta = Math.abs(hueDiff) > 180 ? (hueDiff < 0 ? 360 : -360) : 0;\r\n    hueDiff += hueDelta;\r\n    const h = hsl1.h + weight * hueDiff;\r\n    \r\n    let hslString = `hsl(${h}, ${s}%, ${l}%)`;\r\n    return(hslString);\r\n}\r\n\r\nfunction _parseHSLString(hslString) {\r\n    let hsl = hslString\r\n        .slice(4)\r\n        .slice(0, -1)\r\n        .split(',')\r\n        .map(elem => parseFloat(elem.trim().replace(\"%\", \"\")));\r\n    return({h: hsl[0], s: hsl[1], l: hsl[2]});\r\n}\r\n\r\n\n\n//# sourceURL=webpack://minigolf/./src/color-utilities.js?");

/***/ }),

/***/ "./src/config.js":
/*!***********************!*\
  !*** ./src/config.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gameConfig\": () => (/* binding */ gameConfig),\n/* harmony export */   \"svgConfig\": () => (/* binding */ svgConfig),\n/* harmony export */   \"webSocketConfig\": () => (/* binding */ webSocketConfig)\n/* harmony export */ });\nconst gameConfig = {\r\n    golfBallRadius: 0.8,\r\n    maxSpeed: 40,\r\n    frictionPerTime: 0.5,\r\n    speedThreshold: 0.5,\r\n    maxDirectionLineLength: 20,\r\n    framesPerSecond: 60,\r\n    gravity: Infinity,\r\n\r\n    directionLineStartColor: 'hsl(120, 100%, 50%)',\r\n    directionLineEndColor: 'hsl(0, 100%, 50%)',\r\n\r\n    interpolationsPerStep: 5,\r\n};\r\n\r\nconst svgConfig = {\r\n    golfBallAttributes: {'r': gameConfig.golfBallRadius, 'fill': 'white', 'stroke-width': 5, 'stroke': 'black', 'stroke-opacity': '0'},\r\n    // The boundary is divided into two components.\r\n    // This is done to ensure that the drawn course is \r\n    // equal to the internal representation\r\n    directionLineAttributes: {'stroke': gameConfig.directionLineStartColor, 'stroke-width': 0.5, 'fill': 'none', 'stroke-linecap': 'round'},\r\n    boundaryAttributesOuter: {'stroke': 'black', 'stroke-width': 2, 'fill': 'none'},\r\n    boundaryAttributesInner: {'stroke': 'white', 'fill': '#3ab93a'},\r\n    obstacleAttributes: {'stroke': 'white', 'fill': 'black'},\r\n    holeAttributes: {'r': 1.25*gameConfig.golfBallRadius, 'fill': 'black'},\r\n    extentPadding: 0.1\r\n};\r\nsvgConfig.boundaryAttributesInner['stroke-width'] = 0;\r\nsvgConfig.obstacleAttributes['stroke-width'] = 0;\r\n//svgConfig.boundaryAttributesOuter['stroke-width'] = 0;\r\n\r\nconst webSocketConfig = {\r\n    host: 'localhost',\r\n    port: 5678,\r\n}\r\n\r\n\n\n//# sourceURL=webpack://minigolf/./src/config.js?");

/***/ }),

/***/ "./src/course.js":
/*!***********************!*\
  !*** ./src/course.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _svg_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./svg-utilities */ \"./src/svg-utilities.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"./src/config.js\");\n/* harmony import */ var _math_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math-utilities */ \"./src/math-utilities.js\");\n\r\n\r\n\r\n\r\n// vertices is an object containing two arrays: boundary and obstacles\r\n// boundary contains the vertices of the polygonal boundary, while\r\n// obstacles contains zero or more array of vertices for internal obstacles\r\nconst Course = function(courseData, rootSVGElement) {\r\n    const _boundaryVertices = courseData.boundary;\r\n    const _obstacles = courseData.obstacles;\r\n    const _holePosition = _math_utilities__WEBPACK_IMPORTED_MODULE_2__.Vector(courseData.hole.position);\r\n    const _holeRadius = courseData.hole.radius;\r\n    let _courseElement;\r\n    const _courseAABB = {xMin: Infinity, xMax: -Infinity, \r\n        yMin: Infinity, yMax: -Infinity};\r\n\r\n    let edges = [];\r\n\r\n    function _computeEdgesAndAABB() {\r\n        const boundaryVerticesLooped = [..._boundaryVertices];\r\n        boundaryVerticesLooped.push(boundaryVerticesLooped[0]);\r\n    \r\n        // Create array of edges from both boundary and inner obstacles\r\n        for (let i = 1; i < boundaryVerticesLooped.length; i++) {\r\n            const a = boundaryVerticesLooped[i-1];\r\n            const b = boundaryVerticesLooped[i];\r\n            edges.push(_math_utilities__WEBPACK_IMPORTED_MODULE_2__.Edge(_math_utilities__WEBPACK_IMPORTED_MODULE_2__.Vector({x: a.x, y: a.y}), _math_utilities__WEBPACK_IMPORTED_MODULE_2__.Vector({x: b.x, y: b.y})));\r\n\r\n            _courseAABB.xMin = Math.min(_courseAABB.xMin, a.x);\r\n            _courseAABB.xMax = Math.max(_courseAABB.xMax, a.x);\r\n            _courseAABB.yMin = Math.min(_courseAABB.yMin, a.y);\r\n            _courseAABB.yMax = Math.max(_courseAABB.yMax, a.y);\r\n\r\n        }\r\n        _obstacles?.forEach(obstacleVertices => {\r\n            const obstacleVerticesLooped = [...obstacleVertices];\r\n            obstacleVerticesLooped.push(obstacleVerticesLooped[0]);\r\n            for (let i = 1; i < obstacleVerticesLooped.length; i++) {\r\n                const a = obstacleVerticesLooped[i-1];\r\n                const b = obstacleVerticesLooped[i];\r\n            edges.push(_math_utilities__WEBPACK_IMPORTED_MODULE_2__.Edge(_math_utilities__WEBPACK_IMPORTED_MODULE_2__.Vector({x: a.x, y: a.y}), _math_utilities__WEBPACK_IMPORTED_MODULE_2__.Vector({x: b.x, y: b.y})));\r\n            }\r\n        })\r\n    \r\n    }\r\n    \r\n    function printVertices() {\r\n        console.log(courseData);\r\n    }\r\n\r\n    function draw() {\r\n        _svg_utilities__WEBPACK_IMPORTED_MODULE_0__.drawPolygon(_courseElement, _boundaryVertices, \r\n            _config__WEBPACK_IMPORTED_MODULE_1__.svgConfig.boundaryAttributesOuter, ['course-boundary', 'course-boundary-outer']);\r\n        _svg_utilities__WEBPACK_IMPORTED_MODULE_0__.drawPolygon(_courseElement, _boundaryVertices, \r\n            _config__WEBPACK_IMPORTED_MODULE_1__.svgConfig.boundaryAttributesInner, ['course-boundary', 'course-boundary-inner']);\r\n        //boundaryVertices.forEach(vertex => svgUtilities.drawCircle(courseElement, vertex, {'r': 0.5, fill: 'red', 'stroke-width': 0 }));\r\n        _obstacles?.forEach(obstacleVertices => {\r\n            _svg_utilities__WEBPACK_IMPORTED_MODULE_0__.drawPolygon(_courseElement, obstacleVertices, \r\n                _config__WEBPACK_IMPORTED_MODULE_1__.svgConfig.obstacleAttributes, ['course-obstacle']);\r\n            //obstacleVertices.forEach(vertex => svgUtilities.drawCircle(courseElement, vertex, {'r': 0.5, fill: 'blue', 'stroke-width': 0 }));\r\n            }\r\n        )\r\n        const holeAttributes = _config__WEBPACK_IMPORTED_MODULE_1__.svgConfig.holeAttributes;\r\n        holeAttributes.r = _holeRadius;\r\n        _svg_utilities__WEBPACK_IMPORTED_MODULE_0__.drawCircle(_courseElement, _holePosition, holeAttributes, ['course-hole']);\r\n    }\r\n\r\n    function destroy() {\r\n        _courseElement.remove();\r\n    }\r\n\r\n    function initialize() {\r\n        _courseElement = _svg_utilities__WEBPACK_IMPORTED_MODULE_0__.createGroupElement(['course-container']);\r\n        rootSVGElement.append(_courseElement);\r\n        _computeEdgesAndAABB();\r\n        draw();\r\n        console.log(getCourseAABB());\r\n    }\r\n\r\n    function getBoundaryVertices() {\r\n        return(_boundaryVertices);\r\n    }\r\n\r\n    function getObstacles() {\r\n        return(_obstacles);\r\n    }\r\n\r\n    function getEdges() {\r\n        return(edges);\r\n    }\r\n\r\n    function getHole() {\r\n        return({position: _holePosition, radius: _holeRadius});\r\n    }\r\n\r\n    function getCourseAABB() {\r\n        return(_courseAABB);\r\n    }\r\n\r\n    return({ draw, initialize, getBoundaryVertices, getObstacles, getEdges,\r\n        getHole, destroy, getCourseAABB });\r\n};\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Course);\n\n//# sourceURL=webpack://minigolf/./src/course.js?");

/***/ }),

/***/ "./src/game-mechanics.js":
/*!*******************************!*\
  !*** ./src/game-mechanics.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _math_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math-utilities */ \"./src/math-utilities.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"./src/config.js\");\n\r\n\r\n\r\nconst GameMechanics = function(game) {\r\n    const golfBall = game.getGolfBall();\r\n    const course = game.getCourse();\r\n    \r\n    // Create array of edges from both boundary and inner obstacles\r\n    const edges = course.getEdges();\r\n    const hole = course.getHole();\r\n    const upperPuttVelocity = Math.sqrt(_config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.gravity / (2*_config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.golfBallRadius)) *\r\n        (2*hole.radius - _config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.golfBallRadius);\r\n    console.log(upperPuttVelocity);\r\n\r\n    let collisionData;\r\n    let golfBallIsMoving = false;\r\n    let isFinished = false;\r\n    let previousTimeStamp;\r\n\r\n    function computeNextCollision() {\r\n        const golfBallPosition = golfBall.getPosition();\r\n        const golfBallDirection = golfBall.getDirection();\r\n        const directionVector = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.createUnitVector(golfBallDirection);\r\n        const golfBallPath = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.Path(golfBallPosition, directionVector);\r\n        // Paths that outline the extent covered by the motion of the golf ball\r\n        const outerPaths = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.getParallelPaths(golfBallPath, _config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.golfBallRadius);\r\n        \r\n        \r\n        // collisionData contains four properties: \"Time\" of collision (based\r\n        // on unit vector, not actual time), location of collision, center of\r\n        // golf ball at collision, and direction of golf ball after collision\r\n        let earliestCollisionData = {time: Infinity};\r\n        for (const edge of edges) {\r\n            const interSectionA = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.computePathEdgeIntersection(outerPaths.pathA, edge);\r\n            const interSectionB = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.computePathEdgeIntersection(outerPaths.pathB, edge);\r\n            if (interSectionA && interSectionB) {\r\n                const canCollide = \r\n                    (_math_utilities__WEBPACK_IMPORTED_MODULE_0__.isInRange(interSectionA.edgeParameter, 0, 1) && \r\n                    _math_utilities__WEBPACK_IMPORTED_MODULE_0__.isInRange(interSectionA.pathParameter, 0, Infinity)) ||\r\n                    (_math_utilities__WEBPACK_IMPORTED_MODULE_0__.isInRange(interSectionB.edgeParameter, 0, 1) && \r\n                    _math_utilities__WEBPACK_IMPORTED_MODULE_0__.isInRange(interSectionB.pathParameter, 0, Infinity))\r\n                if (canCollide) {\r\n                    // Compute collision\r\n                    const collisionData = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.computeMovingCircleEdgeIntersection(\r\n                        golfBallPath, _config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.golfBallRadius, edge);\r\n                    if (collisionData.time < earliestCollisionData.time) {\r\n                        earliestCollisionData = collisionData;\r\n                    }\r\n                }\r\n            } \r\n        }\r\n        const collisionPointCenterVector = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.subtractVectors(earliestCollisionData.collisionPoint, \r\n            earliestCollisionData.collisionCenter);\r\n        let newDirectionVector = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.vectorReflection(directionVector,\r\n            collisionPointCenterVector);\r\n        newDirectionVector = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.scaleVector(newDirectionVector, -1);\r\n        const directionAfterCollision = Math.atan2(newDirectionVector.getY(), newDirectionVector.getX());\r\n        earliestCollisionData.directionAfterCollision = directionAfterCollision;\r\n        return(earliestCollisionData);\r\n\r\n    }\r\n    \r\n    function step(timeStep) {\r\n        if (!collisionData) {\r\n            collisionData = computeNextCollision();\r\n        }\r\n\r\n        const distanceToCollision = _math_utilities__WEBPACK_IMPORTED_MODULE_0__.VectorDistance(golfBall.getPosition(), \r\n            collisionData.collisionCenter);\r\n        const nextStepLength = golfBall.getSpeed()*timeStep;\r\n\r\n        // If the next step is longer than the distance to the collision,\r\n        // we'll split it into two steps: a partial step equal to the distance\r\n        // to the collision, and a post-collision step using the remaining time\r\n        if (nextStepLength > distanceToCollision) {\r\n            // Partial step\r\n            const partialTimeStep = distanceToCollision / golfBall.getSpeed();\r\n            golfBall.step(partialTimeStep);\r\n            const oldSpeed = golfBall.getSpeed();\r\n            const newSpeed = (1 - _config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.frictionPerTime*partialTimeStep)*oldSpeed;\r\n            golfBall.setSpeed(newSpeed);\r\n\r\n            // Change direction due to collision, and perform rest of step\r\n            golfBall.setDirection(collisionData.directionAfterCollision);\r\n            const remainingTimeStep = timeStep - partialTimeStep;\r\n            collisionData = null;\r\n            checkIfWon();\r\n\r\n            step(remainingTimeStep);\r\n        } else {\r\n            golfBall.step(timeStep);\r\n            const oldSpeed = golfBall.getSpeed();\r\n            const newSpeed = (1 - _config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.frictionPerTime*timeStep)*oldSpeed;\r\n            golfBall.setSpeed(newSpeed);\r\n            if (golfBall.getSpeed() < _config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.speedThreshold) {\r\n                golfBall.setSpeed(0);\r\n                golfBallIsMoving = false;\r\n            }\r\n            checkIfWon();\r\n        }\r\n    }\r\n\r\n    function multipleSteps(timeStep, numberOfSteps) {\r\n        for (let i = 0; i < numberOfSteps; i++) {\r\n            if (!golfBallIsMoving) return;\r\n            step(timeStep / numberOfSteps);\r\n        }\r\n    }\r\n\r\n    function stepLoop(timeStamp) {\r\n        if (!previousTimeStamp) {\r\n            previousTimeStamp = timeStamp;\r\n        }\r\n        let timeStep = (timeStamp - previousTimeStamp) / 1000;\r\n        if (timeStep > (1 / _config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.framesPerSecond) && golfBallIsMoving) {\r\n            previousTimeStamp = timeStamp;\r\n            multipleSteps(timeStep, _config__WEBPACK_IMPORTED_MODULE_1__.gameConfig.interpolationsPerStep);\r\n            golfBall.update();\r\n        }\r\n\r\n        if (isFinished) {\r\n            game.playerFinished();\r\n            reset();\r\n        } else if (golfBallIsMoving) {\r\n            window.requestAnimationFrame(stepLoop);\r\n        } else {\r\n            reset();\r\n            game.golfBallStoppedMoving();\r\n        }\r\n    }\r\n\r\n    function executeShot() {\r\n        golfBallIsMoving = true;\r\n        isFinished = false;\r\n        window.requestAnimationFrame(stepLoop);\r\n    }\r\n\r\n    function enableRunning() {\r\n        golfBallIsMoving = true;\r\n    }\r\n\r\n    function checkIfRunning() {\r\n        return(golfBallIsMoving);\r\n    }\r\n\r\n    function checkIfWon() {\r\n        // In order to put, the distance between the center of the golf ball\r\n        // and the center of the hole must be less than the radius of the hole,\r\n        // and the velocity must be less than a certain limit\r\n        const position = golfBall.getPosition();\r\n        const speed = golfBall.getSpeed();\r\n        if (_math_utilities__WEBPACK_IMPORTED_MODULE_0__.subtractVectors(position, hole.position).getLength() <= hole.radius &&\r\n                                                            speed < upperPuttVelocity) {\r\n            golfBall.setPosition(hole.position);\r\n            golfBallIsMoving = false;\r\n            isFinished = true;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        collisionData = null;\r\n        golfBallIsMoving = false;\r\n        previousTimeStamp = null;\r\n    }\r\n\r\n    //setInterval(() => multipleSteps(0.0167/10, 10), 1000/60);\r\n    /*setInterval(() => step(1/25), 1000/25);*/\r\n    return({ step, multipleSteps, stepLoop, \r\n        executeShot,enableRunning, checkIfRunning });\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GameMechanics);\n\n//# sourceURL=webpack://minigolf/./src/game-mechanics.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _golf_ball__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./golf-ball */ \"./src/golf-ball.js\");\n/* harmony import */ var _course__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./course */ \"./src/course.js\");\n/* harmony import */ var _game_mechanics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./game-mechanics */ \"./src/game-mechanics.js\");\n/* harmony import */ var _svg_utilities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./svg-utilities */ \"./src/svg-utilities.js\");\n/* harmony import */ var _math_utilities__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./math-utilities */ \"./src/math-utilities.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config */ \"./src/config.js\");\n/* harmony import */ var _color_utilities__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./color-utilities */ \"./src/color-utilities.js\");\n/* harmony import */ var _generate_course__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./generate-course */ \"./src/generate-course.js\");\n/* harmony import */ var _generate_course__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_generate_course__WEBPACK_IMPORTED_MODULE_7__);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Game(rootSVGElement) {\r\n    let courseData;\r\n    let golfBall;\r\n    let course;\r\n    let gameMechanics;\r\n\r\n    let directionLineElement;\r\n    let directionLineVector;\r\n\r\n    const _computeSVGPosition = _svg_utilities__WEBPACK_IMPORTED_MODULE_3__.createSVGPositionComputer(rootSVGElement);\r\n\r\n    function _setNewGolfBall(courseData) {\r\n        golfBall = (0,_golf_ball__WEBPACK_IMPORTED_MODULE_0__.default)(courseData, 0, 0, rootSVGElement);\r\n        golfBall.initialize();\r\n        golfBall.addEventListener('mousedown', _handleGolfBallMouseDown);\r\n        golfBall.addEventListener('touchstart', _handleGolfBallTouchStart);\r\n    }\r\n    \r\n    function getGolfBall() {\r\n        return(golfBall);\r\n    }\r\n\r\n    function _setNewCourse(courseData) {\r\n        course = (0,_course__WEBPACK_IMPORTED_MODULE_1__.default)(courseData, rootSVGElement);\r\n        course.initialize();\r\n    }\r\n\r\n    function getCourse() {\r\n        return(course);\r\n    }\r\n\r\n    const setGameContent = (newCourseData) => {\r\n        courseData = newCourseData;\r\n        _setNewCourse(courseData);\r\n        _setNewGolfBall(courseData);\r\n        gameMechanics = (0,_game_mechanics__WEBPACK_IMPORTED_MODULE_2__.default)(gameObj);\r\n        _svg_utilities__WEBPACK_IMPORTED_MODULE_3__.setSVGExtent(rootSVGElement, course.getCourseAABB(), _config__WEBPACK_IMPORTED_MODULE_5__.svgConfig.extentPadding);\r\n    }\r\n\r\n    function generateNewCourse() {\r\n        const newCourseData = (0,_generate_course__WEBPACK_IMPORTED_MODULE_7__.generateCourse)();\r\n        setGameContent(newCourseData);\r\n    }\r\n\r\n    function _handleGolfBallMouseDown() {\r\n        if (!golfBall.checkUserClickable()) return;\r\n        const golfBallPosition = golfBall.getPosition();\r\n        directionLineElement = _svg_utilities__WEBPACK_IMPORTED_MODULE_3__.drawLine(rootSVGElement, \r\n            golfBallPosition, golfBallPosition,\r\n            _config__WEBPACK_IMPORTED_MODULE_5__.svgConfig.directionLineAttributes, ['direction-line']);\r\n            \r\n        rootSVGElement.addEventListener('mousemove', _handleGolfBallMouseMove);\r\n        rootSVGElement.addEventListener('mouseup', _handleGolfBallMouseUp);\r\n    }\r\n\r\n    function _handleGolfBallTouchStart() {\r\n        if (!golfBall.checkUserClickable()) return;\r\n        const golfBallPosition = golfBall.getPosition();\r\n        directionLineElement = _svg_utilities__WEBPACK_IMPORTED_MODULE_3__.drawLine(rootSVGElement, \r\n            golfBallPosition, golfBallPosition,\r\n            _config__WEBPACK_IMPORTED_MODULE_5__.svgConfig.directionLineAttributes, ['direction-line']);\r\n        rootSVGElement.addEventListener('touchmove', _handleGolfBallTouchMove);\r\n        rootSVGElement.addEventListener('touchend', _handleGolfBallTouchEnd);\r\n    }\r\n\r\n    function _handleGolfBallMouseMove(event) {\r\n        const svgPosition = _computeSVGPosition({x: event.clientX, y: event.clientY});\r\n        _updateDirectionLine(svgPosition);\r\n    }\r\n\r\n    function _handleGolfBallTouchMove(event) {\r\n        const touch = event.changedTouches[0];\r\n        const svgPosition = _computeSVGPosition({x: touch.clientX, y: touch.clientY});\r\n        _updateDirectionLine(svgPosition);\r\n    }\r\n\r\n    function _updateDirectionLine(svgPosition) {\r\n        // A vector from the center of the golf ball to the position of the\r\n        // mouse/finger\r\n        directionLineVector = _math_utilities__WEBPACK_IMPORTED_MODULE_4__.subtractVectors(_math_utilities__WEBPACK_IMPORTED_MODULE_4__.Vector(svgPosition), \r\n            golfBall.getPosition());\r\n        \r\n        // If the length is longer than the maximum permitted value,\r\n        // rescale to a vector of maximum permitted length,\r\n        // and compute corresponding line end\r\n        let lineEnd;\r\n        if (directionLineVector.getLength() > _config__WEBPACK_IMPORTED_MODULE_5__.gameConfig.maxDirectionLineLength) {\r\n            const unitVector = directionLineVector.getNormalized();\r\n            directionLineVector = _math_utilities__WEBPACK_IMPORTED_MODULE_4__.scaleVector(unitVector, _config__WEBPACK_IMPORTED_MODULE_5__.gameConfig.maxDirectionLineLength);\r\n            lineEnd = _math_utilities__WEBPACK_IMPORTED_MODULE_4__.addVectors(golfBall.getPosition(), directionLineVector);\r\n        } else {\r\n            lineEnd = svgPosition;\r\n        }\r\n        _svg_utilities__WEBPACK_IMPORTED_MODULE_3__.setLineEnd(directionLineElement, lineEnd);\r\n        \r\n        // Interpolate color\r\n        const lineColor = _color_utilities__WEBPACK_IMPORTED_MODULE_6__.interpolateColors(_config__WEBPACK_IMPORTED_MODULE_5__.gameConfig.directionLineStartColor, \r\n            _config__WEBPACK_IMPORTED_MODULE_5__.gameConfig.directionLineEndColor, \r\n            directionLineVector.getLength() / _config__WEBPACK_IMPORTED_MODULE_5__.gameConfig.maxDirectionLineLength);\r\n        _svg_utilities__WEBPACK_IMPORTED_MODULE_3__.setAttributes(directionLineElement, {stroke: lineColor});\r\n    }\r\n\r\n    function _handleGolfBallMouseUp() {\r\n        rootSVGElement.removeEventListener('mousemove', _handleGolfBallMouseMove);\r\n        rootSVGElement.removeEventListener('mouseup', _handleGolfBallMouseUp);\r\n        directionLineElement.remove();\r\n        directionLineElement = null;\r\n        if (!directionLineVector) return;\r\n\r\n        computeGolfBallVelocity();\r\n        golfBall.setNotUserClickable();\r\n        directionLineVector = null;\r\n        _executeShot();\r\n    }\r\n\r\n    function _handleGolfBallTouchEnd() {\r\n        rootSVGElement.removeEventListener('touchmove', _handleGolfBallTouchMove);\r\n        rootSVGElement.removeEventListener('touchend', _handleGolfBallTouchEnd);\r\n        directionLineElement.remove();\r\n        directionLineElement = null;\r\n        if (!directionLineVector) return;\r\n\r\n        computeGolfBallVelocity();\r\n        golfBall.setNotUserClickable();\r\n        directionLineVector = null;\r\n        _executeShot();\r\n    }\r\n\r\n    function computeGolfBallVelocity() {\r\n        // The direction of the ball is in the opposite direction of\r\n        // directionLineVector\r\n        const initialDirection = directionLineVector.getDirection() + Math.PI;\r\n        const initialSpeed = _config__WEBPACK_IMPORTED_MODULE_5__.gameConfig.maxSpeed * \r\n            directionLineVector.getLength() / _config__WEBPACK_IMPORTED_MODULE_5__.gameConfig.maxDirectionLineLength;\r\n        // Set directionLineVector to null, \r\n        console.log(`speed: ${initialSpeed}, direction: ${initialDirection}`);\r\n        golfBall.setDirection(initialDirection);\r\n        golfBall.setSpeed(initialSpeed);\r\n    }\r\n\r\n    function _executeShot() {\r\n        gameMechanics.executeShot();\r\n    }\r\n\r\n    function playerFinished() {\r\n        setTimeout(() => {\r\n            _cleanUpGame();\r\n            generateNewCourse(1);\r\n        }, 5000);\r\n    }\r\n\r\n    function golfBallStoppedMoving() {\r\n        golfBall.setUserClickable();\r\n    }\r\n\r\n    function _cleanUpGame() {\r\n        course?.destroy();\r\n        golfBall?.destroy();\r\n        course = null;\r\n        golfBall = null;\r\n        gameMechanics = null;\r\n        courseData = null;\r\n    }\r\n\r\n    const gameObj = { setGameContent, getGolfBall, getCourse, playerFinished,\r\n        generateNewCourse, golfBallStoppedMoving };\r\n    return(gameObj);\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Game);\n\n//# sourceURL=webpack://minigolf/./src/game.js?");

/***/ }),

/***/ "./src/generate-course.js":
/*!********************************!*\
  !*** ./src/generate-course.js ***!
  \********************************/
/***/ ((module) => {

eval("let i = 0;\r\nfunction generateCourse() {\r\n    let courseData;\r\n    if (i === 0) {\r\n        courseData = {\r\n            boundary: [\r\n            {x: 10, y: 40},\r\n            {x: 30, y: 40},\r\n            {x: 30, y: 45},\r\n            {x: 65, y: 45},\r\n            {x: 65, y: 40},\r\n            {x: 90, y: 40},\r\n            {x: 90, y: 60},\r\n            {x: 65, y: 60},\r\n            {x: 65, y: 55},\r\n            {x: 30, y: 55},\r\n            {x: 30, y: 60},\r\n            {x: 10, y: 60}\r\n            ],\r\n            obstacles: [\r\n                [\r\n                    {x: 15, y: 55},\r\n                    {x: 25, y: 55},\r\n                    {x: 25, y: 45},\r\n                    {x: 15, y: 45}\r\n                ]\r\n            ],\r\n            initialGolfBallPosition: {x: 80, y: 50},\r\n            hole: {position: {x: 12.5, y: 50}, radius: 2.1}\r\n            };\r\n    } else {\r\n        courseData = {boundary: \r\n            [{x: 88.38, y: 37.15},\r\n                {x: 84.15, y: 48.92},\r\n                {x: 72.43, y: 61.96},\r\n                {x: 55.25, y: 68.69},\r\n                {x: 37.56, y: 67.01},\r\n                {x: 25.61, y: 60.48},\r\n                {x: 14.06, y: 45.26},\r\n                {x: 11, y: 31.88},\r\n                {x: 88.38, y: 31.61},\r\n                {x: 88.38, y: 35.05},\r\n                {x: 23.92, y: 34.88},\r\n                {x: 27.44, y: 43.97},\r\n                {x: 34.52, y: 51.55},\r\n                {x: 44.18, y: 55.89},\r\n                {x: 53.69, y: 56.27},\r\n                {x: 64.4, y: 52.28},\r\n                {x: 71.5, y: 45.55},\r\n                {x: 75.56, y: 37.12}], \r\n            initialGolfBallPosition: {x: 80, y: 40},\r\n            hole: {position: {x: 86, y: 33.4}, radius: 1.5}};\r\n    }\r\n    i++;\r\n    return(courseData);\r\n}\r\n\r\nmodule.exports = { generateCourse };\n\n//# sourceURL=webpack://minigolf/./src/generate-course.js?");

/***/ }),

/***/ "./src/golf-ball.js":
/*!**************************!*\
  !*** ./src/golf-ball.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/config.js\");\n/* harmony import */ var _svg_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./svg-utilities */ \"./src/svg-utilities.js\");\n/* harmony import */ var _math_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math-utilities */ \"./src/math-utilities.js\");\n\r\n\r\n\r\n\r\nconst GolfBall = function(\r\n        courseData, \r\n        initialSpeed, \r\n        initialDirection, \r\n        rootSVGElement) {\r\n    \r\n    let position = _math_utilities__WEBPACK_IMPORTED_MODULE_2__.Vector(courseData.initialGolfBallPosition);\r\n    let speed = initialSpeed;\r\n    let direction = initialDirection;\r\n    let _unitDirectionVector = _math_utilities__WEBPACK_IMPORTED_MODULE_2__.createUnitVector(direction);\r\n    let _golfBallElement;\r\n    let _isUserClickable = false;\r\n\r\n    function draw() {\r\n        _golfBallElement = _svg_utilities__WEBPACK_IMPORTED_MODULE_1__.drawCircle(rootSVGElement, position.getCoordinates(), \r\n            _config__WEBPACK_IMPORTED_MODULE_0__.svgConfig.golfBallAttributes, ['golf-ball']);\r\n    }\r\n\r\n    function getPosition() {\r\n        return(position);\r\n    }\r\n\r\n    function setPosition(newPosition) {\r\n        position = newPosition;\r\n    }\r\n\r\n    function getSpeed() {\r\n        return(speed);\r\n    }\r\n\r\n    function setSpeed(newSpeed) {\r\n        speed = newSpeed;\r\n    }\r\n\r\n    function getDirection() {\r\n        return(direction);\r\n    }\r\n\r\n    function setDirection(newDirection) {\r\n        direction = newDirection;\r\n        _unitDirectionVector = _math_utilities__WEBPACK_IMPORTED_MODULE_2__.createUnitVector(direction)\r\n    }\r\n\r\n    function step(timeStep) {\r\n        const stepSize = speed*timeStep;\r\n        let newPosition = position;\r\n        newPosition.setX(newPosition.getX() + stepSize*_unitDirectionVector.getX());\r\n        newPosition.setY(newPosition.getY() + stepSize*_unitDirectionVector.getY());\r\n        setPosition(newPosition);\r\n    }\r\n\r\n    function initialize() {\r\n        draw();\r\n        setUserClickable();\r\n    }\r\n\r\n    function update() {\r\n        _svg_utilities__WEBPACK_IMPORTED_MODULE_1__.setCirclePosition(_golfBallElement, position.getCoordinates());\r\n    }\r\n\r\n    function destroy() {\r\n        _golfBallElement.remove();\r\n    }\r\n\r\n    function addEventListener(eventName, callback) {\r\n        _golfBallElement.addEventListener(eventName, callback);\r\n    }\r\n\r\n    function removeEventListener(eventName, callback) {\r\n        _golfBallElement.removeEventListener(eventName, callback);\r\n    }\r\n\r\n    function setUserClickable() {\r\n        _isUserClickable = true;\r\n        _golfBallElement.classList.add('user-clickable');\r\n    }\r\n\r\n    function setNotUserClickable() {\r\n        _isUserClickable = false;\r\n        _golfBallElement.classList.remove('user-clickable');\r\n    }\r\n    \r\n    function checkUserClickable() {\r\n        return(_isUserClickable);\r\n    }\r\n\r\n    return({ initialize, draw, \r\n        getPosition, setPosition, \r\n        getSpeed, setSpeed,\r\n        getDirection, setDirection,\r\n        destroy, step, update,\r\n        addEventListener, removeEventListener,\r\n        setUserClickable, setNotUserClickable,\r\n        checkUserClickable })\r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GolfBall);\n\n//# sourceURL=webpack://minigolf/./src/golf-ball.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _course__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./course */ \"./src/course.js\");\n/* harmony import */ var _golf_ball__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./golf-ball */ \"./src/golf-ball.js\");\n/* harmony import */ var _game_mechanics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./game-mechanics */ \"./src/game-mechanics.js\");\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./game */ \"./src/game.js\");\n/* harmony import */ var _online_game__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./online-game */ \"./src/online-game.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst rootSVGElement = document.querySelector('#game-container');\r\n\r\n\r\nconst game = (0,_online_game__WEBPACK_IMPORTED_MODULE_4__.default)(rootSVGElement);\r\ngame.generateNewCourse();\r\n//game.setGameContent(courseData, {x: 80, y: 50});\r\n\r\n//const gameMechanics = GameMechanics(course, golfBall);\r\n\n\n//# sourceURL=webpack://minigolf/./src/index.js?");

/***/ }),

/***/ "./src/math-utilities.js":
/*!*******************************!*\
  !*** ./src/math-utilities.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Vector\": () => (/* binding */ Vector),\n/* harmony export */   \"dotProduct\": () => (/* binding */ dotProduct),\n/* harmony export */   \"crossProduct2D\": () => (/* binding */ crossProduct2D),\n/* harmony export */   \"addVectors\": () => (/* binding */ addVectors),\n/* harmony export */   \"VectorDistance\": () => (/* binding */ VectorDistance),\n/* harmony export */   \"subtractVectors\": () => (/* binding */ subtractVectors),\n/* harmony export */   \"scaleVector\": () => (/* binding */ scaleVector),\n/* harmony export */   \"createUnitVector\": () => (/* binding */ createUnitVector),\n/* harmony export */   \"vectorProjection\": () => (/* binding */ vectorProjection),\n/* harmony export */   \"vectorReflection\": () => (/* binding */ vectorReflection),\n/* harmony export */   \"Edge\": () => (/* binding */ Edge),\n/* harmony export */   \"Path\": () => (/* binding */ Path),\n/* harmony export */   \"computePathEdgeIntersection\": () => (/* binding */ computePathEdgeIntersection),\n/* harmony export */   \"getParallelPaths\": () => (/* binding */ getParallelPaths),\n/* harmony export */   \"isInRange\": () => (/* binding */ isInRange),\n/* harmony export */   \"computeMovingCircleEdgeIntersection\": () => (/* binding */ computeMovingCircleEdgeIntersection)\n/* harmony export */ });\n﻿\r\n// Represents a general two-dimensional vector (or point)\r\nfunction Vector({x, y}) {\r\n    let _x = x;\r\n    let _y = y;\r\n    let _length;\r\n\r\n    function getX() {\r\n        return(_x);\r\n    }\r\n\r\n    function setX(newX) {\r\n        _x = newX;\r\n    }\r\n\r\n    function getY() {\r\n        return(_y);\r\n    }\r\n\r\n    function setY(newY) {\r\n        _y = newY;\r\n    }\r\n\r\n    function getCoordinates() {\r\n        return({x: _x, y: _y})\r\n    }\r\n\r\n    function getPerpendicular() {\r\n        return(Vector({x: -_y, y: _x}));\r\n    }\r\n\r\n    function getLength() {\r\n        if (!_length) {\r\n            _length = Math.sqrt(_x**2 + _y**2)\r\n        }\r\n        return(_length);\r\n    }\r\n\r\n    function normalize() {\r\n        const length = getLength();\r\n        if (length == 0) return;\r\n        _x /= length;\r\n        _y /= length;\r\n    }\r\n\r\n    function getNormalized() {\r\n        return(Vector({x: _x / getLength(), y: _y / getLength()}));\r\n    }\r\n\r\n    function getDirection() {\r\n        return(Math.atan2(_y, _x));\r\n    }\r\n\r\n    function getString() {\r\n        return(`[x: ${_x}, y: ${_y}]`)\r\n    }\r\n    return({ getX, setX, getY, setY, getPerpendicular, getLength, normalize,\r\n            getCoordinates, getNormalized, getDirection, getString })\r\n}\r\n\r\nfunction dotProduct(vector1, vector2) {\r\n    return(vector1.getX()*vector2.getX() + vector1.getY()*vector2.getY());\r\n}\r\n\r\nfunction crossProduct2D(vector1, vector2) {\r\n    return(vector1.getX()*vector2.getY() - vector2.getX()*vector1.getY());\r\n}\r\n\r\nfunction addVectors(vector1, vector2) {\r\n    const sumX = vector1.getX() + vector2.getX();\r\n    const sumY = vector1.getY() + vector2.getY();\r\n    return(Vector({x: sumX, y: sumY}));\r\n}\r\n\r\nfunction subtractVectors(vector1, vector2) {\r\n    const differenceX = vector1.getX() - vector2.getX();\r\n    const differenceY = vector1.getY() - vector2.getY();\r\n    return(Vector({x: differenceX, y: differenceY}));\r\n}\r\n\r\nfunction scaleVector(vector, scalar) {\r\n    const scaledX = scalar*vector.getX();\r\n    const scaledY = scalar*vector.getY();\r\n    return(Vector({x: scaledX, y: scaledY}));\r\n}\r\n\r\nfunction createUnitVector(direction) {\r\n    return(Vector({x: Math.cos(direction), y: Math.sin(direction)}));\r\n}\r\n\r\n// Computes the projection of vectorA onto vectorB\r\nfunction vectorProjection(vectorA, vectorB) {\r\n    const scalarProjection = dotProduct(vectorA, vectorB) / vectorB.getLength()**2;\r\n    return(scaleVector(vectorB, scalarProjection));\r\n}\r\n\r\n// Reflects the vectorA by vectorB. This is done by first computing the vector\r\n// rejection of vectorA on vectorB (vectorA - the projection of vectorA on vectorB).\r\n// Then, the reflection is given by vectorA - 2*(rejection of vectorA on vectorB)\r\nfunction vectorReflection(vectorA, vectorB) {\r\n    const rejection = subtractVectors(vectorA, vectorProjection(vectorA, vectorB));\r\n    return(subtractVectors(vectorA, scaleVector(rejection, 2)));\r\n}\r\n\r\nfunction VectorDistance(vector1, vector2) {\r\n    return(subtractVectors(vector2, vector1).getLength());\r\n}\r\n\r\n// Represents an edge in a polygon\r\nfunction Edge(startVertex, endVertex) {\r\n    let _startVertex = startVertex;\r\n    let _endVertex = endVertex;\r\n    let _diffVector = subtractVectors(_endVertex, _startVertex);\r\n\r\n    function getLength() {\r\n        return(_diffVector.getLength());\r\n    }\r\n\r\n    function getStartVertex() {\r\n        return(_startVertex);\r\n    }\r\n\r\n    function getEndVertex() {\r\n        return(_endVertex);\r\n    }\r\n\r\n    function getDifferenceVector() {\r\n        return(_diffVector);\r\n    }\r\n\r\n    // Takes in a position on the edge and computes the proportion,\r\n    // so that a value between 0 (startVertex) and 1 (endVertex) is returned\r\n    // when the position is on the vertex\r\n    function computePositionProportion(position) {\r\n        const startPositionDistance = subtractVectors(startVertex, position).getLength();\r\n        const endPositionDistance = subtractVectors(endVertex, position).getLength();\r\n        const proportion = startPositionDistance / getLength();\r\n        if (endPositionDistance > getLength()) {\r\n            return(-proportion);\r\n        }\r\n        return(proportion);\r\n    }\r\n\r\n    function getString() {\r\n        return(`Start: ${_startVertex.getString()}, end: ${_endVertex.getString()}`)\r\n    }\r\n    \r\n    return({ getLength, getStartVertex, getEndVertex, getDifferenceVector, getString,\r\n            computePositionProportion });\r\n}\r\n\r\n// A path describes the motion of the ball\r\nfunction Path(initialPoint, directionVector) {\r\n    let _initialPoint = initialPoint;\r\n    let _directionVector = directionVector;\r\n\r\n    function getInitialPoint() {\r\n        return(_initialPoint);\r\n    }\r\n\r\n    function getDirectionVector() {\r\n        return(_directionVector);\r\n    }\r\n\r\n    function getPositionAtTime(time) {\r\n        return(addVectors(_initialPoint, scaleVector(_directionVector, time)));\r\n    }\r\n\r\n    function getString() {\r\n        return(`Initial point: ${_initialPoint.getString()}, direction: ${_directionVector.getString()}`)\r\n    }\r\n\r\n    return({ getInitialPoint, getDirectionVector, getPositionAtTime, getString });\r\n}\r\n\r\n// Useful reference: Intersection of two line segments\r\nfunction computePathEdgeIntersection(path, edge) {\r\n    // Path is on the form pathStart + pathVector*t, where t >= 0\r\n    const pathStart = path.getInitialPoint();\r\n    const pathVector = path.getDirectionVector();\r\n\r\n    // Edge is on form edgeStart + edgeVector*u, where 0 <= s <= 1\r\n    const edgeStart = edge.getStartVertex();\r\n    const edgeVector = edge.getDifferenceVector();\r\n\r\n    // Intersection when t = (edgeStart - pathStart) × edgeVector / (pathVector × edgeVector)\r\n    //                or u = (edgeStart - pathStart) × pathVector / (pathVector × edgeVector)\r\n    const startDiff = subtractVectors(edgeStart, pathStart);\r\n    const denominator = crossProduct2D(pathVector, edgeVector);\r\n    if (denominator === 0) return;\r\n\r\n    const t = crossProduct2D(startDiff, edgeVector) / denominator;\r\n    const u = crossProduct2D(startDiff, pathVector) / denominator;\r\n    const intersectionPoint = path.getPositionAtTime(t);\r\n    return({ intersectionPoint, pathParameter: t, edgeParameter: u});\r\n}\r\n\r\n// Given a circle and a path, returns the two paths that are parallel to the \r\n// original path and tangetial to the circle. These will go in the same \r\n// direction, but start in different points\r\nfunction getParallelPaths(path, radius) {\r\n    const directionVector = path.getDirectionVector();\r\n    const unitPerpVector = directionVector.getNormalized().getPerpendicular();\r\n\r\n    const initialPointA = addVectors(path.getInitialPoint(), scaleVector(unitPerpVector, radius));\r\n    const initialPointB = subtractVectors(path.getInitialPoint(), scaleVector(unitPerpVector, radius));\r\n    return({pathA: Path(initialPointA, directionVector), pathB: Path(initialPointB, directionVector)})\r\n}\r\n\r\nfunction isInRange(value, lower, upper) {\r\n    return(value >= lower && value <= upper);\r\n}\r\n\r\n// Computes the intersection point between a circle moving along a straight\r\n// path and an edge\r\nfunction computeMovingCircleEdgeIntersection(path, radius, edge) {\r\n    // Path is on the form pathStart + pathVector*t, where t >= 0\r\n    const pathStart = path.getInitialPoint();\r\n    const pathVector = path.getDirectionVector();\r\n\r\n    // Edge is on form edgeStart + edgeVector*u, where 0 <= s <= 1\r\n    const edgeStart = edge.getStartVertex();\r\n    const edgeEnd = edge.getEndVertex();\r\n    const edgeVector = edge.getDifferenceVector();\r\n\r\n    let time = (radius*edgeVector.getLength() + \r\n        dotProduct(pathStart.getPerpendicular(), edgeVector) +\r\n        dotProduct(edgeStart, edgeEnd.getPerpendicular())) / \r\n        dotProduct(pathVector, edgeVector.getPerpendicular())\r\n    let collisionCenter = path.getPositionAtTime(time);\r\n\r\n    const edgeStartCentered = subtractVectors(edgeStart, collisionCenter);\r\n    const edgeEndCentered = subtractVectors(edgeEnd, collisionCenter);\r\n    const crossProd = crossProduct2D(edgeStartCentered, edgeEndCentered);\r\n\r\n    const collisionPointX = collisionCenter.getX() + \r\n        crossProd * edgeVector.getY() / edgeVector.getLength()**2;\r\n    const collisionPointY = collisionCenter.getY() - \r\n        crossProd * edgeVector.getX() / edgeVector.getLength()**2;\r\n    let collisionPoint = Vector({x: collisionPointX, y: collisionPointY});\r\n\r\n    const collisionEdgeProportion = edge.computePositionProportion(collisionPoint);\r\n    // If this value is between 0 and 1, the collision occurs on the \"flat\" \r\n    // part of the edge, not on a corner\r\n    if (isInRange(collisionEdgeProportion, 0, 1)) {\r\n        return({time, collisionCenter, collisionPoint});\r\n    } else if (isInRange(collisionEdgeProportion, -Infinity, 0)) {\r\n        // If computed collision happens before start of edge,\r\n        // the circle will collide with the start vertex\r\n        collisionPoint = edgeStart;\r\n    } else {\r\n        // Otherwise, it will collide with the end vertex\r\n        collisionPoint = edgeEnd;\r\n    }\r\n\r\n    const startColDiff = subtractVectors(pathStart, collisionPoint);\r\n    time = - (Math.sqrt((dotProduct(startColDiff, pathVector))**2 -\r\n        pathVector.getLength()**2*(startColDiff.getLength()**2 - radius**2)) +\r\n        dotProduct(startColDiff, pathVector))/(pathVector.getLength()**2);\r\n    collisionCenter = path.getPositionAtTime(time);\r\n    return({time, collisionCenter, collisionPoint});\r\n}\r\n\r\n\n\n//# sourceURL=webpack://minigolf/./src/math-utilities.js?");

/***/ }),

/***/ "./src/online-game.js":
/*!****************************!*\
  !*** ./src/online-game.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game */ \"./src/game.js\");\n/* harmony import */ var _websocket_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./websocket-client */ \"./src/websocket-client.js\");\n\r\n\r\n\r\nfunction OnlineGame(rootSVGElement) {\r\n    const game = (0,_game__WEBPACK_IMPORTED_MODULE_0__.default)(rootSVGElement);\r\n    \r\n    game.playerFinished = function() {\r\n        console.log(\"finished\");\r\n    }\r\n\r\n    game.handleIncomingMessage = function(message) {\r\n        console.log(message);\r\n    }\r\n\r\n    const wsClient = (0,_websocket_client__WEBPACK_IMPORTED_MODULE_1__.default)(game);\r\n    return(game);\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OnlineGame);\n\n//# sourceURL=webpack://minigolf/./src/online-game.js?");

/***/ }),

/***/ "./src/svg-utilities.js":
/*!******************************!*\
  !*** ./src/svg-utilities.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setAttributes\": () => (/* binding */ setAttributes),\n/* harmony export */   \"drawLine\": () => (/* binding */ drawLine),\n/* harmony export */   \"drawPolygon\": () => (/* binding */ drawPolygon),\n/* harmony export */   \"drawCircle\": () => (/* binding */ drawCircle),\n/* harmony export */   \"createGroupElement\": () => (/* binding */ createGroupElement),\n/* harmony export */   \"setCirclePosition\": () => (/* binding */ setCirclePosition),\n/* harmony export */   \"setLineEnd\": () => (/* binding */ setLineEnd),\n/* harmony export */   \"createSVGPositionComputer\": () => (/* binding */ createSVGPositionComputer),\n/* harmony export */   \"setSVGExtent\": () => (/* binding */ setSVGExtent)\n/* harmony export */ });\n\r\nconst XMLNS = 'http://www.w3.org/2000/svg';\r\n\r\nfunction createSVGPositionComputer(rootSVGElement) {\r\n    const point = rootSVGElement.createSVGPoint();\r\n    function computeSVGPosition(clientPosition) {\r\n        point.x = clientPosition.x;\r\n        point.y = clientPosition.y;\r\n        return(point.matrixTransform(rootSVGElement.getScreenCTM().inverse()));\r\n    }\r\n    return(computeSVGPosition);\r\n}\r\n\r\nfunction setAttributes(element, attributes) {\r\n    if (!attributes) return;\r\n    for (const name in attributes) {\r\n        element.setAttribute(name, attributes[name]);\r\n    }\r\n}\r\n\r\nfunction createGeneralElement(type, attributes, classArray) {\r\n    const element = document.createElementNS(XMLNS, type);\r\n    classArray?.forEach(className => element.classList.add(className));\r\n    setAttributes(element, attributes);\r\n    return(element);\r\n}\r\n\r\nfunction drawLine(parentSVGElement, startPoint, endPoint, attributes, classArray) {\r\n    attributes.x1 = startPoint.x || startPoint.getX();\r\n    attributes.y1 = startPoint.y || startPoint.getY();\r\n    attributes.x2 = endPoint.x || endPoint.getX();\r\n    attributes.y2 = endPoint.y || endPoint.getY();\r\n\r\n    const lineElement = createGeneralElement('line', attributes, classArray);\r\n\r\n    parentSVGElement.append(lineElement);\r\n    return(lineElement);\r\n    \r\n}\r\n\r\nfunction drawPolygon(parentSVGElement, vertices, attributes, classArray) {\r\n    // Format expected by SVG polygon: x1,y1 x2,y2,...\r\n    const vertexString = vertices\r\n        .map(vertex => `${vertex.x || vertex.getX() },${vertex.y || vertex.getY()}`)\r\n        .join(\" \");\r\n    attributes.points = vertexString;\r\n\r\n    const polygonElement = createGeneralElement('polygon', attributes, classArray);\r\n\r\n    parentSVGElement.append(polygonElement);\r\n    return(polygonElement);\r\n}\r\n\r\nfunction drawCircle(parentSVGElement, center, attributes, classArray) {\r\n    attributes.cx = center.x || center.getX();\r\n    attributes.cy = center.y || center.getY();\r\n\r\n    const circleElement = createGeneralElement('circle', attributes, classArray);\r\n\r\n    parentSVGElement.append(circleElement);\r\n    return(circleElement);\r\n}\r\n\r\nfunction createGroupElement(classArray) {\r\n    const groupElement = createGeneralElement('g', null, classArray);\r\n    return(groupElement);\r\n}\r\n\r\nfunction setCirclePosition(circleElement, position) {\r\n    setAttributes(circleElement, {cx: position.x, cy: position.y});\r\n}\r\n\r\nfunction setLineEnd(lineElement, endPosition) {\r\n    setAttributes(lineElement, {'x2': endPosition.x || endPosition.getX(), \r\n        'y2': endPosition.y || endPosition.getY()});\r\n}\r\n\r\nfunction setSVGExtent(rootSVGElement, extent, padding) {\r\n    const width = extent.xMax - extent.xMin;\r\n    const height = extent.yMax - extent.yMin;\r\n\r\n    const xMinPadded = extent.xMin - padding*width;\r\n    const yMinPadded = extent.yMin - padding*height;\r\n    const widthPadded = (1 + 2*padding)*width;\r\n    const heightPadded = (1 + 2*padding)*height;\r\n    const viewBoxString = `${xMinPadded} ${yMinPadded} ${widthPadded} ${heightPadded}`;\r\n    rootSVGElement.setAttribute('viewBox', viewBoxString);\r\n}\r\n\r\n\n\n//# sourceURL=webpack://minigolf/./src/svg-utilities.js?");

/***/ }),

/***/ "./src/websocket-client.js":
/*!*********************************!*\
  !*** ./src/websocket-client.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./src/config.js\");\n\r\n\r\nfunction WebSocketClient(onlineGame) {\r\n    const connectionString = `ws://${_config__WEBPACK_IMPORTED_MODULE_0__.webSocketConfig.host}:${_config__WEBPACK_IMPORTED_MODULE_0__.webSocketConfig.port}`;\r\n    const webSocket = new WebSocket(connectionString);\r\n\r\n    webSocket.addEventListener('open', () => console.log(\"open\"));\r\n    webSocket.addEventListener('message', message => onlineGame.handleIncomingMessage(JSON.parse(message.data)));\r\n    setInterval(() => webSocket.send('test'), 1000);\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WebSocketClient);\n\n//# sourceURL=webpack://minigolf/./src/websocket-client.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;